priority -50

extends c

priority 2

snippet inc
#include <${1:iostream}>
endsnippet

snippet begend "$1.begin(), $1.end() (beginend)" i
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

snippet beginend "$1.begin(), $1.end() (beginend)" i
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

snippet cl "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`}
{
public:
	${1/(\w+).*/$1/}($2);${3:
	virtual ~${1/(\w+).*/$1/}();}

private:
	${0:/* data */}
};
endsnippet

snippet tp "template <typename ..> (template)"
template <typename $1>
endsnippet

snippet tpc "template <class ..> (template)"
template <class $1>
endsnippet

snippet cla "An entire .h generator" b
#ifndef ${4:`!v substitute(vim_snippets#Filename('$1_H','ClassName'),'.*','\U&\E','')`}
#define $4

class ${1:`!v substitute(substitute(vim_snippets#Filename('$1','ClassName'),'^.','\u&',''), '_\(\w\)', '\u\1', 'g')`}${3: : ${2}}
{
public:
	$1();${5:
	virtual ~$1();}

private:
	${0}
};

#endif /* $4 */
endsnippet

# foreach
snippet fore
for (${1:auto} ${2:i} : ${3:container})
{
	${4}
}
endsnippet

snippet iter
for (${1:std::vector}<${2:type}>::${3:const_iterator} ${4:i} = ${5:container}.begin(); $4 != $5.end(); ++$4)
{
	${6}
}
endsnippet

snippet us
using $1 = $2;
endsnippet

snippet itera
for (auto ${1:i} = ${2:container}.begin(); $1 != $2.end(); ++$1)
{
	${3:std::cout << *$1 << std::endl;}
}
endsnippet

snippet lld
[${1}](${2}){
	${3}
};
endsnippet

snippet mfun
${4:void} ${1:`!v vim_snippets#Filename('$1', 'ClassName')`}::${2:memberFunction}(${3})
{
	${0}
}
endsnippet

snippet vec "" b
std::vector<${1:T}> ${2};
endsnippet

priority 1

snippet vec "" i
std::vector<${1:T}> ${2}
endsnippet

priority 2

snippet cout
std::cout << ${0}${1: << std::endl};
endsnippet

snippet cerr
std::cerr << ${0}${1: << std::endl};
endsnippet

# vim:ft=snippets:
